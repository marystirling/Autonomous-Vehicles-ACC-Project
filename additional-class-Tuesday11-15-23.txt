Algorithmically populate the mesh in the form of a logistic function over TIME
Interpolate for the desired interval, then take the derivative of the resulting function for acceleration over time.
Integrate subroutine SAFE such that:
SAFE polls TIME-GAP TAU
IF TAU < 0
	RETURN TRUE
ELSE
	RETURN FALSE
Where the returned value either allows for continued acceleration (0) or breaks acceleration (1), calling for deceleration from current point.
This nets -
A smooth polynomial such that V(t) exists over time 0-n in the desired form, where V'(t) shows the acceleration in m/s.
A feedback loop contained in the subroutine to ensure safe acceleration.

Issues -
If time-gap is very small, acceleration still permitted. Hard code in a minimum bound.

Graphically, we are establishing a dynamic linear upper bound on velocity with the subroutine such that if our velocity will cause a crash (time-gap becomes negative), it quits
and decelerates back to a safe speed such that time-gap is approximately 0. 